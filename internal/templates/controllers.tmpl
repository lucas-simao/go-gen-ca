package controllers

import (
	"net/http"

	"github.com/ContaAzul/ca-starters-go/web/webrest"
	"github.com/ContaAzul/{{ .ProjectName | ToLower }}/src/domain/models"
	"github.com/ContaAzul/{{ .ProjectName | ToLower }}/src/domain/usecases"
	"github.com/google/uuid"
)

type {{ .ServiceName | ToTitle }}Controller struct {
	Usecase usecases.I{{ .ServiceName | ToTitle }}Usecases
}

func New{{ .ServiceName | ToTitle }}Controller() *{{ .ServiceName | ToTitle }}Controller {
	return &{{ .ServiceName | ToTitle }}Controller{
		Usecase: usecases.New{{ .ServiceName | ToTitle }}Usecases(),
	}
}

func (c *{{ .ServiceName | ToTitle }}Controller) Routes() []webrest.Route {
	return []webrest.Route{
		{
			URI:      "{{ .ServiceName | ToLower }}s",
			Method:   http.MethodPost,
			Function: c.Create{{ .ServiceName | ToTitle }},
			Prefix:   webrest.AuthenticatedApi,
		},
		{
			URI:      "{{ .ServiceName | ToLower }}s/{id}",
			Method:   http.MethodGet,
			Function: c.Get{{ .ServiceName | ToTitle }}ById,
			Prefix:   webrest.AuthenticatedApi,
		},
		{
			URI:      "{{ .ServiceName | ToLower }}s/{id}",
			Method:   http.MethodPatch,
			Function: c.Update{{ .ServiceName | ToTitle }},
			Prefix:   webrest.AuthenticatedApi,
		},
		{
			URI:      "{{ .ServiceName | ToLower }}s/{id}",
			Method:   http.MethodDelete,
			Function: c.Delete{{ .ServiceName | ToTitle }}ById,
			Prefix:   webrest.AuthenticatedApi,
		},
	}
}

// @Summary Create {{ .ServiceName | ToLower }}
// @Tags
// @Accept json
// @Produce json
// @Success 201 {object} models.{{ .ServiceName | ToTitle }}Response
// @Failure 400
// @Failure 500
// @Param request body models.{{ .ServiceName | ToTitle }} true "request body"
// @Param X-{{ .ServiceName | ToTitle }}antId header uint64 true "id da contabilidade" minimum(0)
// @Param X-UserId header uint64 true "id do usu치rio" minimum(0)
// @Router /api/{{ .ServiceName | ToLower }}s [POST]
func (c *{{ .ServiceName | ToTitle }}Controller) Create{{ .ServiceName | ToTitle }}(ctx webrest.WebContext) {
	payload := &models.{{ .ServiceName | ToTitle }}{}

	err := ctx.DecodeBody(payload)
	if err != nil {
		ctx.ErrorResponse(http.StatusBadRequest, err)
		return
	}

	resp, err := c.Usecase.Create{{ .ServiceName | ToTitle }}(ctx.Context(), payload)
	if err != nil {
		ctx.ErrorResponse(http.StatusInternalServerError, err)
		return
	}

	ctx.JsonResponse(http.StatusCreated, resp)
}

// @Summary Get {{ .ServiceName | ToLower }} by id
// @Tags
// @Accept json
// @Produce json
// @Success 200 {object} models.{{ .ServiceName | ToTitle }}
// @Failure 400
// @Failure 500
// @Param id path string true "{{ .ServiceName | ToLower }} ID"
// @Param X-{{ .ServiceName | ToTitle }}antId header uint64 true "id da contabilidade" minimum(0)
// @Param X-UserId header uint64 true "id do usu치rio" minimum(0)
// @Router /api/{{ .ServiceName | ToLower }}s/{id} [GET]
func (c *{{ .ServiceName | ToTitle }}Controller) Get{{ .ServiceName | ToTitle }}ById(ctx webrest.WebContext) {
	id, err := uuid.Parse(ctx.PathParam("id"))
	if err != nil {
		ctx.ErrorResponse(http.StatusBadRequest, err)
		return
	}

	resp, err := c.Usecase.Get{{ .ServiceName | ToTitle }}ById(ctx.Context(), id)
	if err != nil {
		ctx.ErrorResponse(http.StatusInternalServerError, err)
		return
	}

	ctx.JsonResponse(http.StatusOK, resp)
}

// @Summary Update {{ .ServiceName | ToLower }}
// @Tags
// @Accept json
// @Produce json
// @Success 204
// @Failure 400
// @Failure 500
// @Param id path string true "{{ .ServiceName | ToLower }} ID"
// @Param request body models.{{ .ServiceName | ToTitle }} true "request body"
// @Param X-{{ .ServiceName | ToTitle }}antId header uint64 true "id da contabilidade" minimum(0)
// @Param X-UserId header uint64 true "id do usu치rio" minimum(0)
// @Router /api/{{ .ServiceName | ToLower }}s [PATCH]
func (c *{{ .ServiceName | ToTitle }}Controller) Update{{ .ServiceName | ToTitle }}(ctx webrest.WebContext) {
	id, err := uuid.Parse(ctx.PathParam("id"))
	if err != nil {
		ctx.ErrorResponse(http.StatusBadRequest, err)
		return
	}

	payload := &models.{{ .ServiceName | ToTitle }}{}

	err = ctx.DecodeBody(payload)
	if err != nil {
		ctx.ErrorResponse(http.StatusBadRequest, err)
		return
	}

	err = c.Usecase.Update{{ .ServiceName | ToTitle }}(ctx.Context(), id, payload)
	if err != nil {
		ctx.ErrorResponse(http.StatusInternalServerError, err)
		return
	}

	ctx.EmptyResponse(http.StatusNoContent)
}

// @Summary Delete {{ .ServiceName | ToLower }}
// @Tags
// @Accept json
// @Produce json
// @Success 204
// @Failure 400
// @Failure 500
// @Param id path string true "{{ .ServiceName | ToLower }} ID"
// @Param X-{{ .ServiceName | ToTitle }}antId header uint64 true "id da contabilidade" minimum(0)
// @Param X-UserId header uint64 true "id do usu치rio" minimum(0)
// @Router /api/{{ .ServiceName | ToLower }}s/{id} [DELETE]
func (c *{{ .ServiceName | ToTitle }}Controller) Delete{{ .ServiceName | ToTitle }}ById(ctx webrest.WebContext) {
	id, err := uuid.Parse(ctx.PathParam("id"))
	if err != nil {
		ctx.ErrorResponse(http.StatusBadRequest, err)
		return
	}

	err = c.Usecase.Delete{{ .ServiceName | ToTitle }}ById(ctx.Context(), id)
	if err != nil {
		ctx.ErrorResponse(http.StatusInternalServerError, err)
		return
	}

	ctx.EmptyResponse(http.StatusNoContent)
}
