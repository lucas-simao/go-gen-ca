//go:generate mockgen -source {{ .ServiceName | ToLower }}_repository.go -destination mock/{{ .ServiceName | ToLower }}_repository_mock.go -package mock
package repositories

import (
	"context"

	"github.com/ContaAzul/ca-starters-go/database/sqlDB"
	"github.com/ContaAzul/{{ .ProjectName | ToLower }}/src/domain/models"
	"github.com/google/uuid"
)

type I{{ .ServiceName | ToTitle }}Repository interface {
	Create{{ .ServiceName | ToTitle }}(ctx context.Context, {{ .ServiceName | ToLower }} *models.{{ .ServiceName | ToTitle }}) (*models.{{ .ServiceName | ToTitle }}Response, error)
	Get{{ .ServiceName | ToTitle }}ById(ctx context.Context, id uuid.UUID) (*models.{{ .ServiceName | ToTitle }}, error)
	Update{{ .ServiceName | ToTitle }}(ctx context.Context, id uuid.UUID, {{ .ServiceName | ToLower }} *models.{{ .ServiceName | ToTitle }}) error
	Delete{{ .ServiceName | ToTitle }}ById(ctx context.Context, id uuid.UUID) error
}

type {{ .ServiceName | ToTitle }}DBRepository struct{}

func New{{ .ServiceName | ToTitle }}DBRepository() *{{ .ServiceName | ToTitle }}DBRepository {
	return &{{ .ServiceName | ToTitle }}DBRepository{}
}

func (r *{{ .ServiceName | ToTitle }}DBRepository) Create{{ .ServiceName | ToTitle }}(ctx context.Context, {{ .ServiceName | ToLower }} *models.{{ .ServiceName | ToTitle }}) (*models.{{ .ServiceName | ToTitle }}Response, error) {
	query := `
		INSERT INTO {{ .ServiceName | ToLower }}(tenant_id, digit, agency, status)
		VALUES($1, $2, $3, $4)
		RETURNING id
	`

	return sqlDB.NewQuery[models.{{ .ServiceName | ToTitle }}Response](ctx, query, {{ .ServiceName | ToLower }}.TenantID, {{ .ServiceName | ToLower }}.Digit, {{ .ServiceName | ToLower }}.Agency, {{ .ServiceName | ToLower }}.Status).One()
}

func (r *{{ .ServiceName | ToTitle }}DBRepository) Get{{ .ServiceName | ToTitle }}ById(ctx context.Context, id uuid.UUID) (*models.{{ .ServiceName | ToTitle }}, error) {
	query := `SELECT id, tenant_id, digit, agency, number, status, created_at, updated_at FROM {{ .ServiceName | ToLower }} WHERE id = $1`

	return sqlDB.NewQuery[models.{{ .ServiceName | ToTitle }}](ctx, query, id).One()
}

func (r *{{ .ServiceName | ToTitle }}DBRepository) Update{{ .ServiceName | ToTitle }}(ctx context.Context, id uuid.UUID, {{ .ServiceName | ToLower }} *models.{{ .ServiceName | ToTitle }}) error {
	query := `UPDATE {{ .ServiceName | ToLower }} SET tenant_id = $1 WHERE id = $2`

	return sqlDB.NewStatement(ctx, query, {{ .ServiceName | ToLower }}.TenantID, id).Execute()
}

func (r *{{ .ServiceName | ToTitle }}DBRepository) Delete{{ .ServiceName | ToTitle }}ById(ctx context.Context, id uuid.UUID) error {
	const query = `DELETE FROM {{ .ServiceName | ToLower }} WHERE id = $1`

	return sqlDB.NewStatement(ctx, query, id).Execute()
}
